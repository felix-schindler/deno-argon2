name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      contents: read
      id-token: write # The OIDC ID token is used for authentication with JSR.
    strategy:
      matrix:
        include:
          # Test jobs for all OS/arch combinations
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            kind: test
            lib_name: libdeno_argon2.dylib
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            kind: test
            lib_name: libdeno_argon2.dylib
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            kind: test
            lib_name: deno_argon2.dll
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
            kind: test
            lib_name: deno_argon2.dll
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            kind: test
            lib_name: libdeno_argon2.so
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            kind: test
            lib_name: libdeno_argon2.so
          # Lint jobs (only need one per OS, use x86_64)
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            kind: lint
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            kind: lint
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            kind: lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rust with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install cross-compilation target
        if: matrix.kind == 'test'
        run: rustup target add ${{ matrix.target }}

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Log versions
        run: |
          deno --version
          rustc --version
          cargo --version

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.kind }}-${{ runner.os }}-${{ matrix.arch }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Clippy
        if: matrix.kind == 'lint'
        run: cargo clippy --all-targets --release --locked -- -D clippy::all

      - name: Build
        if: matrix.kind == 'test'
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Rename library file
        if: matrix.kind == 'test'
        shell: bash
        run: |
          source_path="target/${{ matrix.target }}/release/${{ matrix.lib_name }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            dest_name="deno_argon2_${{ matrix.arch }}.dll"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            dest_name="libdeno_argon2_${{ matrix.arch }}.dylib"
          else
            dest_name="libdeno_argon2_${{ matrix.arch }}.so"
          fi
          dest_path="target/${{ matrix.target }}/release/$dest_name"
          cp "$source_path" "$dest_path"

      - name: Lint TypeScript
        if: matrix.kind == 'lint' && matrix.os == 'ubuntu-latest'
        run: deno task ok

      - name: Test TypeScript
        if: matrix.kind == 'test'
        run: deno task test

      - name: Release
        uses: softprops/action-gh-release@v2
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REPO_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/libdeno_argon2_${{ matrix.arch }}.dylib
            target/${{ matrix.target }}/release/libdeno_argon2_${{ matrix.arch }}.so
            target/${{ matrix.target }}/release/deno_argon2_${{ matrix.arch }}.dll

      - name: Publish to JSR
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: deno publish

      - name: After Release Test
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/')
        run: deno test -
